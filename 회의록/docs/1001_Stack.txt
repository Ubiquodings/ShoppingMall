
Day1007


ok* 주기적 작업 요청 : 공식 예제 찾기
ok  * 응답 mock 값 간단하게 준비하기 : 장고에서 하드코딩 리턴
  * 주기적으로 응답 mock 값 소켓클라에 전달해서 동작 확인하기

ok- 여기서 잠시 막혔는데 소켓 url 파악 필요 : 사용자 시나리오 생각중..


<시나리오>
주기적으로 갱신되는 추천 목록에는
* userId 기반 개인화 추천목록
* 모든 사용자 동일하게 변경되는 추천목록


- 뭘 먼저해도 상관은 없는데, 개인화 추천목록 먼저 작업하려고
* 내가 본 상품의 연관 상품
* xx님을 위한 추천상품
* xx님을 위한 할인 상품
* 상품 카테고리 기반 목록
- 개인화 말고 다른 추천은 결과까지 작성할 수 있겠다!
* 요즘 잘나가는 상품
* 해당 상품과 이런 상품도 함께 구매했어요


- 공통적으로 userId 보내면 
- itemId list 를 장고에서 받아올거야 : 추천코드 적용 후에는 일관성 위해서 kurlyId 로 작업하기
(/분석결과)

- es 에 저장하고
* es 에 어떻게 저장할까 ?
- 기존 데이터는 지우지 않았으면 좋겠어
- timestamp 내림차로 가져와서, 가장 최근거 뽑아쓰자

내림차 가져오기
- postman : /ubic_click_action/_search/?size=235&sort=now:desc
- python : https://victorydntmd.tistory.com/315



- 소켓 클라에 결과 : 첫 page 전달하고 : 기획상 4개씩이라서 : template

** es 에서 가져오는 방법이 있고,
** django 에서 .pkl 저장해서 관리하는 방법이 있다 : 이게 더 나은거같기도 ..
** 그럼 주기적으로 .pkl 연산 요청만 수행하고
** django 는 서빙하는 역할
** 소켓도 django 와 간단히 통신하는 용도로 동작!


장고에서 api 작성
ok- .pkl 저장 api
ok- .pkl 불러와서 결과 서빙하는 api


별개로
- 소켓 클라에서는 상품상세 처럼 주기적으로 결과 요청 : page 이용해서
- 소켓 서버에서는 es 에서 데이터 가져와서
- 페이지네이션 후 결과 전달


<관련 todo>
- userId 기반 추천목록, 소켓 클라 작성: 4가지
- 소켓 서버 작성: 4가지



* 추천목록 소켓 클라이언트 작성
* 쿠폰 코드 작성


- es index list : /_cat/indices
* ubic_click_action : 사용자 행동 index
* ubic_search_action : 사용자 검색 index



[배포 관련]
* 원격 서버 준비하기
* db에 데이터 채우기
* 올려서 동작 확인하기

* 원격 서버 준비되면
  * rdb 장고랑 연동하기


* 가격 취소선, 할인가격 출력하는 ui 가 필요하네!
ok** 보고서도 git 으로 관리하자: doc 폴더에
** 저장소 커밋 기록 보면서 회의록 작성하면 되겠다!

[개발 관련 Todo]


- 추천 목록 코드 세팅하기
- 쿠폰 코드 세팅하기


- 쿠폰 관련해서 소켓 이용할거면
SocketCouponController 생성하기



- 추천 목록 갱신
ok  - 추천 로직 기존 것 그대로 가져올 코드 확보
  - 우리 쇼핑몰에서 어떻게 이용할지 
  - 장고에 코드 옮기기

  - 스부에서 스케줄링:주기적 작업 세팅하기 (분석)
  - 주기적 작업
    - 스부 > 장고 : userCF 분석 요청



- 검색 기능
  * es : aws 에 배포 후 테스트해보기


- 스부 > 장고 : 데이터 분석 요청
  - 상품을 누를 때마다 요청
  - 이 소켓을 화면 이동할 때마다 구독해서 알림 받기
    * 화면을 이동하는 와중에 못받을수도 있겠구나 ?
    - 아니지 카프카 컨슈머에서 db 에 저장하고
    - 알림이 갔는지 아닌지 flag 확인하고 alert 주기 혹은 배지







> 카프카 수집 로직 마무리하기
String action = "order-create";
buildKafkaRequest(userId, product, action);

# 쿠폰 관련 카프카 로직 새로 생성해야할듯!
# 근데 쿠폰 관련 정보를 추천에 어떻게 이용할지 먼저 생각하고 
# 카프카 통해서 수집할지 결정해야 할거같아
# 수집할거면 어떻게 수집할건지 dto 모델링해야할듯
- coupon-create
- coupon-use


- 추가로 소켓도 카프카와 연동하기
  - kafka request dto 모델링해야한다
  - 일단 한꺼번에 카프카로 연동하자
  - 사용자수, 추천목록 (쿠폰은 db 로 연동하자


** 장바구니에 담은 사용자를 안했네 ?? 디용. 보고서에도 없었던듯! 뺄까?



[추천 모으기]

- 추천 알고리즘 먼저 세팅
- itemCF 는 상품 태그 위주로, 키워드 유사도 연산할거야
  - 이건 한 번 하면 변하지 않지
- userCF 는 score 위주로, 주기적 갱신할거야
  - 이건 주기적으로 갱신해야 한다


  - item CF 는 어떻게 할 것인가
    - 형태소 분석한 text 기반으로 키워드 유사도 연산 (기존 로직)
      * 현재로썬 태그/가격/카테고리 정도



================================
================================
====== Done Stack ================
================================

[개발 외 Todo]
- 보고서 보완
  - 수정 사항 적을 공간 확보
  - 작품 소개 보완
  - 그 외 카프카 등 강조할 부분 영어로 표현
  - 작품 특장점 보완
  - 문제점 및 해결방안 검토
  * 등 유연언니 .md 파일 참고

- 조금 나중의 일이지만) 한이음 2차 영상 제작


> 카프카 수집 로직 마무리하기
String action = "order-create";
buildKafkaRequest(userId, product, action);

- click
- hover
- cart-create
- order-create
- order-cancel
- cart-cancel
- cart-modify-plus
- cart-modify-minus


> 사용자 수 종류 : 모델링 할건데, 저장 

* 도메인 객체 만든거
* repo 인터페이스 만들어야 한다!
ProductViewUserNumberRepository
AllViewUserNumberRepository
ProductOrderUserNumberRepository
CouponUseUserNumberRepository

1- 각 상품 함께 열람하고 있는 사용자 수
클래스이름: ProductViewUserNumberDto
기존 UpdateUserNumberDto
long productId, long userNumber

2- [공통] 쇼핑몰에 접속한 전체 사용자 수
클래스이름: AllViewUserNumberDto
long userNumber

3- 각 상품 구매한 사용자 수
클래스이름: ProductOrderUserNumberDto
long productId, long userNumber

4- 각 쿠폰 사용한 사용자 수 : 각 쿠폰당 고유 type 부여하기
클래스이름: CouponUseUserNumberDto
String couponType, long userNumber


dashboard.js
dash-and-product-detail.js
product-list-and-detail.js
order-number.js
buy-together.js
coupon-use.js


접속한 전체 사용자 수
/app/users/root
/topic/users/root

해당상품 구매한 사람수
/app/users/ordered/{productId}
/topic/users/ordered/{productId}

해당 쿠폰 사용한 사람 수
/app/users/coupons/{couponType}
/topic/users/coupons/{couponType}


- 소켓:사용자 수 관련
ok  - 모델링
ok  - 사용자 수 변경 후 소켓 브로드캐스팅 코드

ok- 기존 코드 옮기기
ok- 사용자 수 코드 세팅하기


- 소켓:사용자 수 관련
ok  - 화면 로딩 후 소켓 구독 연결
ok    * 이게 되면 상품 및 추천 목록도 구현 가능해진다
* 상품 상세 페이지에서 받았고, UI 는 없는 상태!


ok- 주문 목록 ajax 처리해야 한다
ok  - 대시보드 참고하면서


- 쿠폰 사용 : coupon-use
ok- 상품 구매 후 db 변화 확인
ok- 쿠폰사용 사용자수 화면 코드
  couponUseUserNumber-{{couponType}}
ok- 소켓 서버
ok- 상품 구매 사용자수 변경되면 서버 브로드캐스팅 테스트

ok- 쿠폰 사용 체크가 안되는건지 : 화면에서 전송을 못한다
ok  - 쿠폰 사용했는데 안지워지는거지 ?
ok- db 결과 가져오는게 안되는건지
ok  - db 에도 결과 저장이 안되거든
- 브로드캐스팅을 못받는건지


- 소켓 사용자 수 일괄 갱신



- 소켓 화면
ok  - 화면 밑에 파일 포함하기
  - 소켓 화면 코드 작성하기

소켓 기능 연동
- 상품 구매 : order-number
ok- 상품 구매 후 db 변화 확인
ok- 상품 구매 사용자수 화면 코드
ok- 소켓 서버
ok- 상품 구매 사용자수 변경되면 서버 브로드캐스팅 테스트
* 대시보드 확인하기
장바구니

쿠폰목록 << 요거 하는중!
  - 상품 관련 쿠폰이면 상품 구매한 사용자 수
  - 쿠폰사용 소켓 연결하기
  
ok결재페이지
ok주문목록

* 상품열람 productUserNumber
* 상품구매 productOrderUserNumber

* 쿠폰사용


- 쿠폰 type 관련 모델링 수정중
쿠폰 종류:type가 3가지 있는거고
- product base
- category base
  * 특별히 coupon type+_+category coupon type 으로 
  * type 구분
- all around
각 종류당 product id, category id 가 있을거고


* 배열 땡겨오는 부분 class&id 맞게 html 수정해야 함!
  * js 코드도 함께 수정할것!


* subscribe 개수 == send 개수
* 그런데 나도 알겠지만
변수가 여러개이면 배열 땡겨와서 
루프 돌며 구독&요청 해야한다!


* 소켓 헤더 설계 : 채팅방 입장
  * 시트 보면서 생각해보기
- 함께보고있는 사용자수 : product-list-and-detail 
헤더에 productId 함께 보내기 : 구독쪽에서

- 접속한 전체 사용자수 : common
헤더에 userId 함게 보내기 : 구독쪽에서

** disconnect 쪽에서는 수 감소시키기
화면이 바뀌고 socket disconnect 가 안먹는 이유는
<a> 또는 click event 이후 서버쪽에서 강제로 화면을 바꾸기 때문이다. 소켓이 disconnect 자원을 정리할 시간을 안주는거지 ..

화면 변경하는 사용자 행동
ok- socket/common.js 에서 disconnect 지우고

ok- userAction.js : click event 이후 소켓 자원 정리하도록 기술하고
ok- a 태그를 button 으로 바꿔서 클릭 이벤트로 변경해야겠다
  href="javascript:void(0);" onclick="callFunction('');"

ok- 검색도있다
ok- 장바구니 이동 모달 : 이벤트로 변경


ok- 화면 변경하고 소켓 헤더 서버 세팅하기

ok- 소켓 클라에서 구독 콜백으로 화면 데이터 갱신하기


** 소켓 헤더 공통 설계하자!
* 현재는 일부 소켓 커트롤러에서 상품 열람 처리하는데
*  채팅방 입장하듯 다시 설계하기!
* 읽기랑 쓰기 분리하기!!

- 상품 목록을 보고있을 때도 사람 수 증가시키기
- 각 js 마다 헤더 플래그 구성해야 하나 ?
* 채팅방 입장하듯 바꾸는거 말이야
* 그냥 소켓 컨트롤러에서 db 증가하고 get 하면 안되나 ? 해보자!
* config 소켓 다 주석하고
# 그래도 채팅방 입장 소켓 2가지밖에 없는데 기존 설계 그대로 가보자!


> 사용자 수 종류 : 소켓 동작

채팅방 연결하는 것처럼. 후 일괄 갱신
* 소켓 헤더 부분 설계하기
- 상품 상세 페이지 : ProductView
- 모든 페이지 : AllView
  요건 사용자 어떻게 관리/집계 ?


- es index list : /_cat/indices
* ubic_user_action : 과거 카테고리 스코어 저장 index : 백업하고 지우자!
* ubic_product_user_number : 필요한건가? 지웠다
* ubic_click_action : 이게 새로이 저장되는 index 이고 user_action 은 지난거같아! 백업하고 지우자
* ubic_search_action


그렇다면 모델링은 : 
index_name : ubic_recom_result
class_name : RecommendList
ok- timestamp
ok- 추천type
ok- 결과 List<Long>
ok- 누구에게? userId

{
  "settings": {
    "index": {
      "number_of_shards": 1,  
      "number_of_replicas": 0 
    }
  }
}

